(()=>{"use strict";var e={402:(e,t,n)=>{n.d(t,{Z:()=>c});var o=n(684),r=n.n(o),a=n(645),s=n.n(a)()(r());s.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap);"]),s.push([e.id,":root {\n    --header-background: #67e8f9;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n    padding: 0;\n    margin: 0;\n    overflow: scroll;\n    font-family: Roboto, sans-serif;\n}\n\n.header {\n    background-color: var(--header-background);\n    height: 80px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.app-title {\n    font-weight: bold;\n    font-size: xx-large;\n}\n\n.content {\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n}","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;IACjB,UAAU;IACV,SAAS;IACT,gBAAgB;IAChB,+BAA+B;AACnC;;AAEA;IACI,0CAA0C;IAC1C,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap");\n\n:root {\n    --header-background: #67e8f9;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n    padding: 0;\n    margin: 0;\n    overflow: scroll;\n    font-family: Roboto, sans-serif;\n}\n\n.header {\n    background-color: var(--header-background);\n    height: 80px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.app-title {\n    font-weight: bold;\n    font-size: xx-large;\n}\n\n.content {\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n}'],sourceRoot:""}]);const c=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(o)for(var c=0;c<this.length;c++){var i=this[c][0];null!=i&&(s[i]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);o&&s[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},684:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},s=[],c=0;c<e.length;c++){var i=e[c],l=o.base?i[0]+o.base:i[0],d=a[l]||0,u="".concat(l," ").concat(d);a[l]=d+1;var p=n(u),f={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var m=r(f,o);o.byIndex=c,t.splice(c,0,{identifier:u,updater:m,references:1})}s.push(u)}return s}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var c=n(a[s]);t[c].references--}for(var i=o(e,r),l=0;l<a.length;l++){var d=n(a[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=i}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},8:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(507);const r={updateItem:e=>{const t=e.getTasks(),n={};for(const e in t){const o={};o.title=t[e].getTitle(),o.desc=t[e].getDesc(),o.notes=t[e].getNotes(),o.dueDate=t[e].getDueDate(),o.done=t[e].getDone(),o.priority=t[e].getPriority(),n[e]=o}const o={name:e.getName(),desc:e.getDesc(),notes:e.getNotes(),dueDate:e.getDueDate(),tasks:n};localStorage.setItem(e.getName(),JSON.stringify(o))},removeItem:e=>{localStorage.removeItem(e)}},a=(()=>{const e={},t=(t,a=null,s=null,c=null,i=null)=>{if(!(t in e)){const l=(()=>{let e=null,t=null,n=null,r=null;const a={};return{getName:()=>e,getDesc:()=>t,getNotes:()=>n,getDueDate:()=>r,getTasks:()=>a,setName:t=>{e=t;for(const e in a)a[e].setProject(t)},setDesc:e=>{t=e},setDueDate:(e,t,n)=>{e instanceof Number&&t instanceof Number&&n instanceof Number&&(r=new Date(e,t,n))},setNotes:e=>{n=e},createTask:(t,n=null,r=null,s=null,c=0)=>{if(t in a)return!1;{const i=(0,o.Z)();return i.setTitle(t),i.setDesc(n),i.setDueDate(r),i.setNotes(s),i.setPriority(c),i.setProject(e),a[t]=i,!0}},removeTask:e=>{delete a[e]}}})();l.setName(t),l.setDesc(a),l.setNotes(s),l.setDueDate(c),e[t]=l;for(const e in i)n(t,e,i[e].desc,i[e].dueDate,i[e].notes,i[e].priority);return r.updateItem(l),!0}return!1},n=(t,n,o=null,a=null,s=null,c=0)=>{const i=e[t];i.createTask(n,o,s,a,c),r.updateItem(i)};return{getProjects:()=>e,createProject:t,addTask:n,removeTask:(t,n)=>{const o=e[t],a=o.getTasks()[n];o.removeTask(a.getTitle()),r.updateItem(o)},deleteProject:t=>{delete e[t],r.removeItem(t)},loadProjects:()=>{const e={...localStorage};for(const o in e){const r=JSON.parse(e[o]),a=r.tasks;t(o,r.desc,r.notes,r.dueDate);for(const e in a)n(o,e.title,e.desc,e.dueDate,e.notes,e.priority)}}}})(),s=a},507:(e,t,n)=>{n.d(t,{Z:()=>o});const o=()=>{let e=null,t=null,n=null,o=null,r=null,a=!1,s=null;return{getTitle:()=>e,getDesc:()=>t,getNotes:()=>o,getDueDate:()=>n,getPriority:()=>r,getDone:()=>a,getProject:()=>s,setTitle:t=>{e=t},setDesc:e=>{t=e},setDueDate:(e,t,o)=>{e instanceof Number&&t instanceof Number&&o instanceof Number&&(n=new Date(e,t,o))},setNotes:e=>{o=e},setPriority:e=>{r=e},setProject:e=>{s=e},toggleDone:()=>{a=!a}}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(8),t=n(379),o=n.n(t),r=n(795),a=n.n(r),s=n(569),c=n.n(s),i=n(565),l=n.n(i),d=n(216),u=n.n(d),p=n(589),f=n.n(p),m=n(402),g={};g.styleTagTransform=f(),g.setAttributes=l(),g.insert=c().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=u(),o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;const A=(()=>{document.body.appendChild((()=>{const e=document.createElement("div");e.classList.add("header");const t=document.createElement("span");return t.classList.add("app-title"),t.textContent="To Do List",e.appendChild(t),e})()),(()=>{const e=document.createElement("div");e.classList.add("content");const t=document.createElement("div");t.classList.add("project-sidebar");const n=document.createElement("div");n.classList.add("project-view"),e.appendChild(t),e.appendChild(n),document.body.appendChild(e)})();const e=(e,t)=>{const n=document.createElement("div");n.classList.add("project-card");const o=document.createElement("span");o.classList.add("project-name"),o.textContent=e.getName(),console.log(e),n.appendChild(o),t.appendChild(n)};return{displayProjectsSidebar:t=>{const n=document.querySelector(".project-sidebar");n.replaceChildren();const o=document.createElement("div");o.classList.add("projects-wrapper");const r=document.createElement("button");r.classList.add("add-project-btn");for(const n in t)e(t[n],o);n.appendChild(o),n.appendChild(r)},displayProject:e}})();(()=>{e.Z.loadProjects();const t=e.Z.getProjects();A.displayProjectsSidebar(t)})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,